# Copyright (c) 2010-2023, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "Just-In-Time Tests"

permissions:
  actions: write

on:
  push:
    branches:
      - next
      - master
  pull_request:
  workflow_dispatch:

env:
  HYPRE_VER: 2.29.0
  METIS_VER: 5.1.0

jobs:
  MFEM-JIT-Tests:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest]
        build-system: [make] #, cmake]
        target: [opt] #, dbg]
        mpi: [par, seq]
    name: ${{ matrix.os }}-${{ matrix.build-system }}-JIT-${{ matrix.target }}-${{ matrix.mpi }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    # #########################################################################
    # MPI setup on Linux and MacOS
    - name: MPI install (Linux)
      if: matrix.mpi == 'par' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install mpich libmpich-dev

    - name: MPI install (MacOS)
      if: matrix.mpi == 'par' && matrix.os == 'macos-latest'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew install openmpi

    # #########################################################################
    - name: Get NPROCESSORS
      run: getconf _NPROCESSORS_ONLN

    # #########################################################################
    # METIS cache & install
    - name: METIS cache
      id: metis-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: metis-5.0
        key: ${{ runner.os }}-metis-5.0-shared

    - name: METIS install
      if: matrix.mpi == 'par' && steps.metis-cache.outputs.cache-hit != 'true'
      run: |
        wget --no-verbose https://mfem.github.io/tpls/metis-${{ env.METIS_VER }}.tar.gz
        rm -rf metis-${{ env.METIS_VER }}
        tar -xzf metis-${{ env.METIS_VER }}.tar.gz
        install="$(pwd)/metis-5.0"
        echo "METIS_DIR=${install}" >> "$GITHUB_ENV"
        cd metis-${{ env.METIS_VER }}
        make config shared=1 prefix=${install}
        make install -j3
      shell: bash

    # #########################################################################
    # HYPRE cache & install
    - name: HYPRE cache
      id: hypre-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: hypre-${{ env.HYPRE_VER }}-shared
        key: ${{ runner.os }}-build-hypre-${{ env.HYPRE_VER }}

    # HYPRE install through action for MacOS only, which has dynamic_lookup
    - name: HYPRE install (MacOS)
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'macos-latest'
      uses: mfem/github-actions/build-hypre@v2.4
      with:
        archive: v${{ env.HYPRE_VER }}.tar.gz
        dir: hypre-${{ env.HYPRE_VER }}
        build-system: make

    # HYPRE install with shared build enabled for Linux
    - name: HYPRE download (Linux)
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
      run: |
        wget --no-verbose https://github.com/hypre-space/hypre/archive/v${{ env.HYPRE_VER }}.tar.gz
        rm -rf hypre-${{ env.HYPRE_VER }}
        tar -xzf v${{ env.HYPRE_VER }}.tar.gz
      shell: bash

    - name: HYPRE install (Linux, make)
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest' && matrix.build-system == 'make'
      run: |
        cd hypre-${{ env.HYPRE_VER }}
        install="$(pwd)/install"
        echo "HYPRE_DIR=$(pwd)" >> "$GITHUB_ENV"
        cd src
        ./configure --prefix=${install} --enable-shared CC=mpicc CFLAGS=-O1 CXX=mpic++
        make -j3
        make install
      shell: bash

    # #########################################################################
    - name: METIS, HYPRE install directory
      if: matrix.build-system == 'make' && matrix.mpi == 'par'
      run: |
        echo METIS_DIR:${{ env.METIS_DIR }}
        echo HYPRE_DIR:${{ env.HYPRE_DIR }}
        echo "METIS_DIR_OPT=HYPRE_DIR=METIS_DIR=${{ env.METIS_DIR }}" >> "$GITHUB_ENV"
        echo "HYPRE_DIR_OPT=HYPRE_DIR=${{ env.HYPRE_DIR }}/install" >> "$GITHUB_ENV"

    # #########################################################################
    # MFEM checkout
    - name: MFEM Checkout
      uses: actions/checkout@v3
      with:
        path: mfem

    # Make MFEM config and build
    - name: MFEM config and build (Parallel, Make)
      if: matrix.build-system == 'make' && matrix.mpi == 'par'
      uses: mfem/github-actions/build-mfem@v2.4
      with:
        os: ${{ matrix.os }}
        target: ${{ matrix.target }}
        mpi: ${{ matrix.mpi }}
        build-system: ${{ matrix.build-system }}
        hypre-dir: ${{ env.HYPRE_DIR }}
        metis-dir: ${{ env.METIS_DIR }}
        mfem-dir: mfem
        library-only: true
        config-options:
          MFEM_USE_JIT=YES
          MFEM_USE_METIS_5=YES
          CXXFLAGS="-O1 -std=c++11"
          ${{ env.METIS_DIR_OPT }}
          ${{ env.HYPRE_DIR_OPT }}

    - name: MFEM info (Make)
      if: matrix.build-system == 'make'
      working-directory: mfem
      run: make info

    - name: MFEM install (Make)
      if: matrix.build-system == 'make'
      working-directory: mfem
      run: make install

    # #########################################################################
    # JIT sequential tests
    - name: MFEM JIT sequential tests
      if: matrix.build-system == 'make' && matrix.mpi == 'seq'
      working-directory: mfem/examples
      # 1. will create the JIT cache: archive + shared
      # 2. will re-use the caches
      # 3. remove the JIT shared lib, but keep the archive
      # 4. will re-build the shared from archive
      run: |
        echo -e "\033[33m--- Compiling ex1\033[m"
        make ex1
        echo -e "\033[33m--- First run will create the JIT cache: archive + shared\033[m"
        ./ex1 -pa -no-vis
        echo -e "\033[33m--- Second run will re-use the caches\033[m"
        ./ex1 -pa -no-vis
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        echo -e "\033[33m--- Now using MFEM_JIT_DEBUG environment variable to show all JIT commands\033[m"
        MFEM_JIT_DEBUG=1 ./ex1 -pa -no-vis

    # #########################################################################
    # JIT parallel tests
    # MFEM_JIT_FORK forces the root MPI to fork before initialization
    # and use the child process to do the std::system calls
    # #########################################################################
    - name: MFEM JIT parallel tests
      working-directory: mfem/examples
      if: matrix.build-system == 'make' && matrix.mpi == 'par'
      run: |
        echo -e "\033[33m--- Compiling ex1p ---\033[m"
        make ex1p
        echo -e "\033[33m--- First run will create the JIT cache: archive + shared\033[m"
        mpirun -np 3 ./ex1p -pa -no-vis
        echo -e "\033[33m--- Second run will re-use the caches\033[m"
        mpirun -np 3 ./ex1p -pa -no-vis
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        echo -e "\033[33m--- Using MFEM_JIT_DEBUG to see the JIT command\033[m"
        MFEM_JIT_DEBUG=1 mpirun -np 3 ./ex1p -pa -no-vis
        echo -e "\033[33m--- Removing all JIT cache ---\033[m"
        rm libmjit.*
        echo -e "\033[33m--- Now using MFEM_JIT_FORK environment variable to use a child process for the std::system\033[m"
        MFEM_JIT_FORK=1 mpirun -np 3 ./ex1p -pa -no-vis
