# Copyright (c) 2010-2023, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "Just-In-Time Tests"

permissions:
  actions: write

on:
  push:
    branches:
      - next
      - master
  pull_request:
  workflow_dispatch:

env:
  HYPRE_VER: 2.29.0
  METIS_VER: 5.1.0

jobs:
  Just-In-Time-Tests:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest]
        build-system: [make] #, cmake]
        target: [opt, dbg]
        mpi: [par, seq]
    name: ${{ matrix.os }}-${{ matrix.build-system }}-JIT-${{ matrix.target }}-${{ matrix.mpi }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    # #########################################################################
    - name: MPI install (Linux)
      if: matrix.mpi == 'par' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install mpich libmpich-dev

    - name: MPI install (MacOS)
      if: matrix.mpi == 'par' && matrix.os == 'macos-latest'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew install openmpi

    # #########################################################################
    - name: METIS cache
      id: metis-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: metis-5.0
        key: ${{ runner.os }}-metis-5.0-shared

    - name: METIS install
      if: matrix.mpi == 'par' && steps.metis-cache.outputs.cache-hit != 'true'
      run: |
        wget --no-verbose https://mfem.github.io/tpls/metis-${{ env.METIS_VER }}.tar.gz
        rm -rf metis-${{ env.METIS_VER }}
        tar -xzf metis-${{ env.METIS_VER }}.tar.gz
        install="$(pwd)/metis-5.0"
        cd metis-${{ env.METIS_VER }}
        make config shared=1 prefix=${install}
        make install -j3

    # #########################################################################
    - name: HYPRE cache
      id: hypre-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: hypre-${{ env.HYPRE_VER }}
        key: ${{ runner.os }}-hypre-${{ env.HYPRE_VER }}-shared

    - name: HYPRE install
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true'
      run: |
        wget --no-verbose https://github.com/hypre-space/hypre/archive/v${{env.HYPRE_VER}}.tar.gz
        rm -rf hypre-${{env.HYPRE_VER}}
        tar -xzf v${{env.HYPRE_VER}}.tar.gz
        install="$(pwd)/hypre-${{ env.HYPRE_VER }}/install"
        cd hypre-${{env.HYPRE_VER}}/src
        ./configure --prefix=${install} --enable-shared CC=mpicc CFLAGS=-O1 CXX=mpic++
        make install -j3

    # #########################################################################
    - name: Set METIS_DIR, HYPRE_DIR and LD_LIBRARY_PATH (par)
      if: matrix.mpi == 'par'
      run: |
        metis_dir="$(pwd)/metis-5.0"
        hypre_dir="$(pwd)/hypre-${{ env.HYPRE_VER }}/install"
        echo "METIS_DIR=${metis_dir}" >> "$GITHUB_ENV"
        echo "HYPRE_DIR=${hypre_dir}" >> "$GITHUB_ENV"
        echo "METIS_DIR_OPT=METIS_DIR=${metis_dir}" >> "$GITHUB_ENV"
        echo "HYPRE_DIR_OPT=HYPRE_DIR=${hypre_dir}" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=${metis_dir}/lib:${hypre_dir}/lib" >> "$GITHUB_ENV"

    - name: Set METIS_DIR and HYPRE_DIR (seq)
      if: matrix.build-system == 'make' && matrix.mpi == 'seq'
      run: |
        echo "METIS_DIR=unused" >> "$GITHUB_ENV"
        echo "HYPRE_DIR=unused" >> "$GITHUB_ENV"

    # #########################################################################
    # MFEM debug (-pedantic -Wall -Werror) and g++ on ubuntu warns about multiple
    # maybe-uninitialized variables. The 'no-maybe-uninitialized' option should
    # be removed when resolved.
    - name: MFEM Checkout
      uses: actions/checkout@v3
      with:
        path: mfem

    - name: MFEM config and build (Make)
      if: matrix.build-system == 'make'
      uses: mfem/github-actions/build-mfem@v2.4
      with:
        os: ${{ matrix.os }}
        target: ${{ matrix.target }}
        mpi: ${{ matrix.mpi }}
        build-system: ${{ matrix.build-system }}
        hypre-dir: ${{ env.HYPRE_DIR }}
        metis-dir: ${{ env.METIS_DIR }}
        mfem-dir: mfem
        library-only: true
        config-options:
          MFEM_USE_JIT=YES
          MFEM_USE_METIS_5=YES
          CXXFLAGS="-O1 -std=c++11 -Wno-maybe-uninitialized"
          ${{ env.METIS_DIR_OPT }}
          ${{ env.HYPRE_DIR_OPT }}

    - name: MFEM info (Make)
      if: matrix.build-system == 'make'
      working-directory: mfem
      run: make info

    - name: MFEM install (Make)
      if: matrix.build-system == 'make'
      working-directory: mfem
      run: make install

    # #########################################################################
    - name: MFEM JIT sequential unit tests
      if: matrix.build-system == 'make' && matrix.mpi == 'seq'
      working-directory: mfem/tests/unit
      run: |
        echo -e "\033[33m--- Compiling mjit_tests, sedov_tests, tmop_pa_tests\033[m"
        make mjit_tests sedov_tests_cpu sedov_tests_debug tmop_pa_tests_cpu tmop_pa_tests_debug -j3
        ./sedov_tests_debug --verbose
        ./sedov_tests_cpu --verbose
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        ./sedov_tests_cpu --verbose
        ./tmop_pa_tests_debug --verbose
        ./tmop_pa_tests_cpu --verbose

    # #########################################################################
    - name: MFEM JIT sequential examples tests
      if: matrix.build-system == 'make' && matrix.mpi == 'seq'
      working-directory: mfem/examples
      run: |
        echo -e "\033[33m--- Compiling ex1\033[m"
        make ex1
        echo -e "\033[33m--- First run will create the JIT cache: archive + shared\033[m"
        ./ex1 -pa -no-vis | (head -n 16 ; tail -n 2)
        echo -e "\033[33m--- Second run will re-use the caches\033[m"
        ./ex1 -pa -no-vis | (head -n 16 ; tail -n 2)
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        echo -e "\033[33m--- Now using MFEM_JIT_DEBUG environment variable to show all JIT commands\033[m"
        MFEM_JIT_DEBUG=1 ./ex1 -pa -no-vis | (head -n 16 ; tail -n 2)

    # #########################################################################
    - name: MFEM JIT parallel unit tests
      if: matrix.build-system == 'make' && matrix.mpi == 'par'
      working-directory: mfem/tests/unit
      run: |
        echo -e "\033[33m--- Compiling pmjit_tests, psedov_tests, ptmop_pa_tests\033[m"
        make pmjit_tests psedov_tests_cpu psedov_tests_debug ptmop_pa_tests_cpu ptmop_pa_tests_debug -j3
        mpirun -np 3 ./psedov_tests_debug --verbose
        mpirun -np 3 ./psedov_tests_cpu --verbose
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        mpirun -np 3 ./psedov_tests_cpu --verbose
        mpirun -np 3 ./ptmop_pa_tests_debug --verbose
        mpirun -np 3 ./ptmop_pa_tests_cpu --verbose

    # #########################################################################
    - name: MFEM JIT parallel examples tests
      working-directory: mfem/examples
      if: matrix.build-system == 'make' && matrix.mpi == 'par'
      run: |
        echo -e "\033[33m--- Compiling ex1p\033[m"
        make ex1p
        echo -e "\033[33m--- First run will create the JIT cache: archive + shared\033[m"
        mpirun -np 3 ./ex1p -pa -no-vis | (head -n 16 ; tail -n 2)
        echo -e "\033[33m--- Second run will re-use the caches\033[m"
        mpirun -np 3 ./ex1p -pa -no-vis | (head -n 16 ; tail -n 2)
        echo -e "\033[33m--- Removing the JIT shared library, but keeping the archive one\033[m"
        rm libmjit.[^a]*
        echo -e "\033[33m--- Using MFEM_JIT_DEBUG to see the JIT command\033[m"
        MFEM_JIT_DEBUG=1 mpirun -np 3 ./ex1p -pa -no-vis | (head -n 16 ; tail -n 2)
        echo -e "\033[33m--- Removing all JIT cache ---\033[m"
        rm libmjit.*
        echo -e "\033[33m--- Now using MFEM_JIT_FORK environment variable to use a child process for the std::system\033[m"
        MFEM_JIT_FORK=1 mpirun -np 3 ./ex1p -pa -no-vis | (head -n 16 ; tail -n 2)
