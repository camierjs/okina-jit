# Copyright (c) 2010-2023, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "JIT"

permissions:
  actions: write

on:
  push:
    branches:
      - next
      - master
  pull_request:
  workflow_dispatch:

env:
  HYPRE_TGZ: v2.29.0.tar.gz
  HYPRE_DIR: hypre-2.29.0
  METIS_TGZ: metis-5.1.0.tar.gz
  METIS_DIR: metis-5.1.0

jobs:
  builds-JIT-tests:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest]
        build-system: [make] #, cmake]
        target: [opt] #, dbg]
        mpi: [par] #, seq]
    name: ${{ matrix.os }}-${{ matrix.build-system }}-${{ matrix.target }}-${{ matrix.mpi }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    # MPI setup on Linux and MacOS
    - name: MPI install (Linux)
      if: matrix.mpi == 'par' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install mpich libmpich-dev

    - name: MPI install (MacOS)
      if: matrix.mpi == 'par' && matrix.os == 'macos-latest'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew install openmpi

    - name: Get NPROCESSORS
      run: getconf _NPROCESSORS_ONLN

    # METIS cache & install
    - name: METIS cache
      id: metis-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: ${{ env.METIS_DIR }}
        key: ${{ runner.os }}-build-${{ env.METIS_DIR }}

    - name: METIS install
      if: matrix.mpi == 'par' && steps.metis-cache.outputs.cache-hit != 'true'
      run: |
        wget --no-verbose https://mfem.github.io/tpls/${{ env.METIS_TGZ }}
        rm -rf ${{ env.METIS_DIR }}
        tar -xzf ${{ env.METIS_TGZ }}
        install_prefix="$(pwd)/metis-5.0"
        cd ${{ env.METIS_DIR }}
        make config shared=1 prefix=${install_prefix}
        make install -j3
      shell: bash

    # HYPRE cache & install
    - name: HYPRE cache
      id: hypre-cache
      if: matrix.mpi == 'par'
      uses: actions/cache@v3
      with:
        path: ${{ env.HYPRE_DIR }}
        key: ${{ runner.os }}-build-${{ env.HYPRE_DIR }}

    # HYPRE install through action for MacOS only, which has dynamic_lookup
    - name: HYPRE install
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'macos-latest'
      uses: mfem/github-actions/build-hypre@v2.4
      with:
        archive: ${{ env.HYPRE_TGZ }}
        dir: ${{ env.HYPRE_DIR }}
        build-system: make

    # HYPRE install with shared build enabled for Linux
    - name: Get Hypre (Linux)
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
      run: |
        wget --no-verbose https://github.com/hypre-space/hypre/archive/${{ env.HYPRE_TGZ }}
        rm -rf ${{ env.HYPRE_DIR }}
        tar -xzf ${{ env.HYPRE_TGZ }}
      shell: bash

    - name: Install Hypre (Linux, make)
      if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest' && matrix.build-system == 'make'
      run: |
        cd ${{ env.HYPRE_DIR }}
        install_prefix="$(pwd)/install"
        cd src
        ./configure --prefix=${install_prefix} --enable-shared CC=mpicc CFLAGS=-O1 CXX=mpic++
        make -j3
        make install
      shell: bash

    # MFEM checkout
    - name: MFEM Checkout
      uses: actions/checkout@v3
      with:
        path: mfem

    # Make MFEM config and build
    - name: MFEM config and build (Make)
      #if: matrix.build-system == 'make'
      uses: mfem/github-actions/build-mfem@v2.4
      with:
        os: ${{ matrix.os }}
        target: ${{ matrix.target }}
        mpi: ${{ matrix.mpi }}
        build-system: ${{ matrix.build-system }}
        hypre-dir: ${{ env.HYPRE_DIR }}
        metis-dir: ${{ env.METIS_DIR }}
        mfem-dir: mfem
        library-only: true
        config-options:
          MFEM_SHARED=YES
          MFEM_USE_JIT=YES
          MFEM_USE_METIS_5=YES
          CXXFLAGS="-O1 -std=c++11"

    - name: MFEM info (Make)
      #if: matrix.build-system == 'make'
      working-directory: mfem
      run: make info

    - name: MFEM install (Make)
      #if: matrix.build-system == 'make'
      working-directory: mfem
      run: make install

    - name: MFEM JIT seq tests
      #if: matrix.build-system == 'make'
      if: matrix.mpi == 'seq'
      working-directory: mfem/examples
      # 1. will create the JIT cache: archive + shared
      # 2. will re-use the caches
      # 3. remove the JIT shared lib, but keep the archive
      # 4. will re-build the shared from archive
      run: |
        make ex1
        ./ex1 -pa -no-vis
        ./ex1 -pa -no-vis
        rm libmjit.[^a]*
        MFEM_JIT_DEBUG=1 ./ex1 -pa -no-vis

    - name: MFEM JIT par tests
      #if: matrix.build-system == 'make'
      if: matrix.mpi == 'par'
      working-directory: mfem/examples
      # MFEM_JIT_FORK forces the root MPI to fork before initialization
      # and use the child process to do the std::system calls
      run: |
        ln -s ../../hypre/install/lib/libHYPRE.* .
        ln -s ../../metis-5.0/lib/libmetis.* .
        ln -la
        make ex1p
        mpirun -np 3 ./ex1p -pa -no-vis
        mpirun -np 3 ./ex1p -pa -no-vis
        rm libmjit.[^a]*
        MFEM_JIT_DEBUG=1 mpirun -np 3 ./ex1p -pa -no-vis
        rm libmjit.*
        MFEM_JIT_FORK=1 mpirun -np 3 ./ex1p -pa -no-vis
        mpirun -np 3 ./ex1p -pa -no-vis
